#[cfg(test)]
extern crate ethabi;
extern crate ethereum_types;
extern crate evm;
extern crate parity_bytes as bytes;
extern crate primitive_types;
extern crate vm;

mod pure_ext;

use ethereum_types::Address;
use evm::factory::Factory as EvmFactory;
use primitive_types::{H256, U256};
use pure_ext::PureExt;
use std::sync::Arc;

#[cfg(test)]
#[macro_use]
extern crate hex_literal;

pub type Result<T> = vm::Result<T>;

/// Returns the result of calling `data` on the given `code.
///
/// `code` takes the deployed code *not* initcode.
/// `data` is the normal transaction for calling a function, i.e.,
///        the sighash followed by abi-encoded arguments.
///
/// Assumes the function being called is a pure function.
pub fn exec(code: Vec<u8>, data: Vec<u8>) -> vm::Result<Vec<u8>> {
    let params = pure_action_params(code, data);
    let schedule = evm::Schedule::new_constantinople();

    let evm = {
        let depth = 1;
        let factory = EvmFactory::new(Default::default());
        factory.create(params.clone(), &schedule, depth)
    };

    let mut ext = PureExt::new(&schedule);

    let result = evm.exec(&mut ext);

    match result {
        Ok(r) => match r? {
            vm::GasLeft::NeedsReturn {
                gas_left: _,
                data,
                apply_state: _,
            } => Ok(data.to_vec()),
            _ => return Err(vm::Error::Internal("Invalid execution".to_string())),
        },
        Err(_) => return Err(vm::Error::Internal("Invalid execution".to_string())),
    }
}

fn pure_action_params(code: Vec<u8>, data: Vec<u8>) -> vm::ActionParams {
    let code_address = Address::zero();
    let code_hash: Option<H256> = None;
    let address = Address::zero();
    let sender = Address::zero();
    let origin = Address::zero();
    let gas: U256 = 50_000_000.into();
    let gas_price = U256::zero();
    let value = vm::ActionValue::Transfer(0.into());
    let code = Some(Arc::new(code));
    let data = Some(data);
    let action_type = vm::ActionType::Call;
    let params_type = vm::ParamsType::Separate;
    let code_version = U256::zero();

    vm::ActionParams {
        code_address,
        code_hash,
        address,
        sender,
        origin,
        gas,
        gas_price,
        value,
        code,
        code_version,
        data,
        action_type,
        params_type,
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn add_0_3() {
        let result = call_add_three(ethabi::Uint::from(0));
        assert_eq!(ethabi::Uint::from(3), result);
    }

    #[test]
    fn add_4_3() {
        let result = call_add_three(ethabi::Uint::from(4));
        assert_eq!(ethabi::Uint::from(7), result);
    }

    #[test]
    fn call_precompile() {
        call_simple_linked();
    }

    /// Executes a call to the following function.
    /// pragma solidity ^0.5.0;
    /// contract AddThree {
    ///   function addThree(uint256 a) public pure returns (uint256) {
    ///     return a + 3;
    ///   }
    /// }

    // taken from precompile.js
    fn call_simple_linked() {
      let deployed_bytecode = hex!("608060405234801561001057600080fd5b506004361061004c5760003560e01c806351c2e5411461005157806359e537c11461008157806367c40cc4146100b1578063ce963afd146100e1575b600080fd5b61006b600480360381019061006691906107bd565b610111565b6040516100789190610bf0565b60405180910390f35b61009b60048036038101906100969190610703565b6102eb565b6040516100a89190610bba565b60405180910390f35b6100cb60048036038101906100c69190610703565b610314565b6040516100d89190610bf0565b60405180910390f35b6100fb60048036038101906100f69190610748565b61035c565b6040516101089190610b84565b60405180910390f35b606061011b61038a565b858581019061012a919061085b565b90506101346103c0565b84848101906101439190610832565b905060006002826000015160405160200161015e9190610bd5565b60405160208183030381529060405260405161017a9190610b6d565b602060405180830381855afa158015610197573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906101ba91906106da565b9050826060015115610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f890610c12565b60405180910390fd5b80836020015114610247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023e90610c32565b60405180910390fd5b826000015160006002811061025857fe5b602002015160200151836000015160016002811061027257fe5b602002015160200181815250506000836000015160006002811061029257fe5b6020020151602001818152505081600001518360400181815250506001836060019015159081151581525050826040516020016102cf9190610c52565b6040516020818303038152906040529350505050949350505050565b60006102f561038a565b8383810190610304919061085b565b9050806060015191505092915050565b606061031e61038a565b838381019061032d919061085b565b905080600001516040516020016103449190610b9f565b60405160208183030381529060405291505092915050565b60008282600181811061036b57fe5b905060200201602081019061038091906106b1565b9050949350505050565b604051806080016040528061039d6103d6565b815260200160008019168152602001600080191681526020016000151581525090565b6040518060200160405280600080191681525090565b60405180604001604052806002905b6103ed610403565b8152602001906001900390816103e55790505090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008135905061044281610dd4565b92915050565b60008135905061045781610deb565b92915050565b60008083601f84011261046f57600080fd5b8235905067ffffffffffffffff81111561048857600080fd5b6020830191508360208202830111156104a057600080fd5b9250929050565b600082601f8301126104b857600080fd5b60026104cb6104c682610c9a565b610c6d565b915081838560408402820111156104e157600080fd5b60005b8381101561051157816104f78882610650565b8452602084019350604083019250506001810190506104e4565b5050505092915050565b60008135905061052a81610e02565b92915050565b60008135905061053f81610e19565b92915050565b60008151905061055481610e19565b92915050565b60008083601f84011261056c57600080fd5b8235905067ffffffffffffffff81111561058557600080fd5b60208301915083600182028301111561059d57600080fd5b9250929050565b6000602082840312156105b657600080fd5b6105c06020610c6d565b905060006105d084828501610530565b60008301525092915050565b600060e082840312156105ee57600080fd5b6105f86080610c6d565b90506000610608848285016104a7565b600083015250608061061c84828501610530565b60208301525060a061063084828501610530565b60408301525060c06106448482850161051b565b60608301525092915050565b60006040828403121561066257600080fd5b61066c6040610c6d565b9050600061067c84828501610448565b60008301525060206106908482850161069c565b60208301525092915050565b6000813590506106ab81610e30565b92915050565b6000602082840312156106c357600080fd5b60006106d184828501610433565b91505092915050565b6000602082840312156106ec57600080fd5b60006106fa84828501610545565b91505092915050565b6000806020838503121561071657600080fd5b600083013567ffffffffffffffff81111561073057600080fd5b61073c8582860161055a565b92509250509250929050565b6000806000806040858703121561075e57600080fd5b600085013567ffffffffffffffff81111561077857600080fd5b6107848782880161055a565b9450945050602085013567ffffffffffffffff8111156107a357600080fd5b6107af8782880161045d565b925092505092959194509250565b600080600080604085870312156107d357600080fd5b600085013567ffffffffffffffff8111156107ed57600080fd5b6107f98782880161055a565b9450945050602085013567ffffffffffffffff81111561081857600080fd5b6108248782880161055a565b925092505092959194509250565b60006020828403121561084457600080fd5b6000610852848285016105a4565b91505092915050565b600060e0828403121561086d57600080fd5b600061087b848285016105dc565b91505092915050565b60006108908383610b2f565b60408301905092915050565b6108a581610d3e565b82525050565b6108b481610d2c565b82525050565b6108c381610cc6565b6108cd8184610ce9565b92506108d882610cbc565b8060005b838110156109095781516108f08782610884565b96506108fb83610cdc565b9250506001810190506108dc565b505050505050565b61091a81610cc6565b6109248184610cf4565b925061092f82610cbc565b8060005b838110156109605781516109478782610884565b965061095283610cdc565b925050600181019050610933565b505050505050565b61097181610d50565b82525050565b61098081610d50565b82525050565b61098f81610d5c565b82525050565b61099e81610d5c565b82525050565b60006109af82610cd1565b6109b98185610cff565b93506109c9818560208601610d90565b6109d281610dc3565b840191505092915050565b60006109e882610cd1565b6109f28185610d10565b9350610a02818560208601610d90565b80840191505092915050565b6000610a1b602583610d1b565b91507f43616e6e6f742074616b6520616374696f6e206f6e2066696e616c697a65642060008301527f73746174650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610a81603983610d1b565b91507f486173682067656e6572617465642066726f6d20707265696d61676520646f6560008301527f73206e6f74206d61746368206861736820696e207374617465000000000000006020830152604082019050919050565b60e082016000820151610af060008501826108ba565b506020820151610b036080850182610986565b506040820151610b1660a0850182610986565b506060820151610b2960c0850182610968565b50505050565b604082016000820151610b45600085018261089c565b506020820151610b586020850182610b5e565b50505050565b610b6781610d86565b82525050565b6000610b7982846109dd565b915081905092915050565b6000602082019050610b9960008301846108ab565b92915050565b6000608082019050610bb46000830184610911565b92915050565b6000602082019050610bcf6000830184610977565b92915050565b6000602082019050610bea6000830184610995565b92915050565b60006020820190508181036000830152610c0a81846109a4565b905092915050565b60006020820190508181036000830152610c2b81610a0e565b9050919050565b60006020820190508181036000830152610c4b81610a74565b9050919050565b600060e082019050610c676000830184610ada565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610c9057600080fd5b8060405250919050565b600067ffffffffffffffff821115610cb157600080fd5b602082029050919050565b6000819050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610d3782610d66565b9050919050565b6000610d4982610d66565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610dae578082015181840152602081019050610d93565b83811115610dbd576000848401525b50505050565b6000601f19601f8301169050919050565b610ddd81610d2c565b8114610de857600080fd5b50565b610df481610d3e565b8114610dff57600080fd5b50565b610e0b81610d50565b8114610e1657600080fd5b50565b610e2281610d5c565b8114610e2d57600080fd5b50565b610e3981610d86565b8114610e4457600080fd5b5056fea2646970667358221220c1e7f9b868491c70013345f329db636250487b5af5af9a6568495a1496b374cd64736f6c63430006090033").to_vec();

      // taken from precompile.js
      let method_data = hex!("51c2e5410000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e0c962fa20f9526c7a0d6adfd42afe2ebb5ac3b90000000000000000000000000000000000000000000000000000000000000001000000000000000000000000496ce9e84ad4d2b03513a32dc53a974f3bbf44ae0000000000000000000000000000000000000000000000000000000000000000443cb75b0394834e4ebe8349f5ee211933c2acd2124db1696c77dc47cf31cdec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020e5667a35467ffbb937e29c02d1d9459ff461489fe3721cb773bb7f767f571647").to_vec();

      let result = exec(deployed_bytecode, method_data).unwrap();

      assert_eq!(result.len(), 32)
    }

    fn call_add_three(input: ethabi::Uint) -> ethabi::Uint {
        let code
            = hex!("608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308316796146044575b600080fd5b348015604f57600080fd5b50607960048036036020811015606457600080fd5b8101908080359060200190929190505050608f565b6040518082815260200191505060405180910390f35b600060038201905091905056fea165627a7a723058200e912ad05dca5252a91d1ce28dda0451a49092178c344ac1a40ccf9c9d5d46150029").to_vec();

        let method = ethabi::Function {
            name: "addThree".to_owned(),
            inputs: vec![ethabi::Param {
                name: "a".to_owned(),
                kind: ethabi::ParamType::Uint(256),
            }],
            outputs: vec![ethabi::Param {
                name: "".to_owned(),
                kind: ethabi::ParamType::Uint(256),
            }],
            constant: true,
        };
        // ABI encode with input of 4.
        let data = method.encode_input(&[ethabi::Token::Uint(input)]).unwrap();
        let result = exec(code, data).unwrap();

        assert_eq!(result.len(), 32);
        ethabi::Uint::from(&result[..32])
    }
}
